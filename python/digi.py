"""Package to configure the HCal digitization pipeline

All classes are derived versions of LDMX.Framework.ldmxcfg.Producer
with helpful member functions.

Two module-wide parameters are defined.

Attributes
----------
nPEPerMIP: float
    Number of PE created for each MIP 
mipEnergy: float
    Energy [MeV] of a single MIP 
"""

from LDMX.Framework.ldmxcfg import Producer

nPEPerMIP = 68. #PEs created per MIP 
mipEnergy = 4.66 #MeV - measured 1.4 MeV for a 6mm thick tile, so for 20mm bar = 1.4*20/6      

gain = 1.2 # very large gain for now
pedestal = 1.

"""Get an HGCROC emulator and configure for the HCal specifically
   This sets the pulse shape parameters to the ones from a fit
   to a test readout of an HCal module and then thresholds to the
   default construction.
"""
class HcalHgcrocEmulator() :

    def __init__(self):
        from LDMX.Tools import HgcrocEmulator
        self.hgcroc = HgcrocEmulator.HgcrocEmulator()

        # readout capacitance of chip is ~20pF
        # does this vary for Hcal?
        self.hgcroc.readoutPadCapacitance = 20. # pF

        # pedestal
        self.hgcroc.pedestal = pedestal

        # readout threshold
        # setting this to the pedestal for now
        self.hgcroc.readoutThreshold = self.hgcroc.pedestal#+1

        # gain
        # gain = maxADCRange/readoutPadCapacitance/1024
        self.hgcroc.gain = gain

        # set defaults
        self.setThresholdDefaults(nPEPerMIP)

        # set pulse shape parameters
        self.hgcroc.rateUpSlope = -0.1141
        self.hgcroc.timeUpSlope = -9.897
        self.hgcroc.rateDnSlope = 0.0279
        self.hgcroc.timeDnSlope = 45.037
        self.hgcroc.timePeak    = 9.747

        # noise (0.5PE?)
        self.hgcroc.noiseRMS = self.calculateVoltageHcal(0.5)

    def calculateVoltageHcal(self, PE) :
        """Calculate the voltage signal [mV] of the input number of photo-electrons (PEs)
        Assuming that 1 PE ~ 5mV
        This translates to (68/4.66)*5 = 73 PE/MeV
        Parameters
        ----------
        PE : int
             Number of photo electrons
        """
        return PE*(5/1)
    
    def setThresholdDefaults(self, pePerMIP):
        """Set the different thresholds of the chip for Hcal
        - toa is 0.05 MIPs above the pedestal
        - tot is very large (for now)
        Parameters
        ----------
        roc:
            Hgcroc Emulator
        pePerMIP: int
            Number of photo electrons generated by a MIP in the detector
        """
        # gain=0.5, ped=1 -> threshold = 20.9 [mV] (42 ADC)
        self.hgcroc.toaThreshold = self.hgcroc.gain*self.hgcroc.pedestal + self.calculateVoltageHcal(0.05*pePerMIP)
        # tot threshold very large for now
        self.hgcroc.totThreshold     = 10000.

class HcalDigiProducer(Producer) :
    """Configuration for HcalDigiProducer

    Attributes
    ----------
    hgcroc : HgcrocEmulator
        Configuration for the chip emulator
    MeV : float
        Conversion between energy [MeV] and voltage [mV]
    inputCollName : str
        Name of input collection  
    inputPassName : str
        Name of input pass 
    digiCollName : str    
        Name of digi collection                                                                                                                                                                          
    """

    def __init__(self, instance_name = 'hcalDigis') :
        super().__init__(instance_name , 'hcal::HcalDigiProducer','Hcal')

        hgcrocEmulator = HcalHgcrocEmulator()
        self.hgcroc = hgcrocEmulator.hgcroc

        #Energy -> Volts converstion
        # energy [MeV] ( 1 MIP / energy per MIP [MeV] ) ( voltage per MIP [mV] / 1 MIP ) = voltage [mV]
        # assuming 1 PEs ~ 5mV ->  self.MeV = 72.961 mV/MeV
        self.MeV = (1./mipEnergy)*hgcrocEmulator.calculateVoltageHcal( nPEPerMIP )

        # attenuation length
        self.attenuationLength = 5.; # in m   
        
        # input and output collection name parameters
        self.inputCollName = 'HcalSimHits'
        self.inputPassName = ''
        self.digiCollName = 'HcalDigis'

class HcalRecProducer(Producer) :
    """Configuration for the HcalRecProducer

    Attributes
    ----------
    voltage_per_mip: float
        Conversion from voltage [mV] to number of MIPs
    mip_energy : float
        Copied from module-wide mipEnergy [MeV]
    clock_cycle : float
        Time for one DAQ clock cycle to pass [ns]
    digiCollName : str
        Name of digi collection
    digiPassName : str
        Name of digi pass
    simHitCollName : str
        Name of simHit collection
    simHitPassName : str 
        Name of simHit pass 
    recHitCollName : str
        Name of recHit collection
    """

    def __init__(self, instance_name = 'hcalRecon') : 
        super().__init__(instance_name , 'hcal::HcalRecProducer','Hcal')

        self.voltage_per_mip = (5/1)*(nPEPerMIP) # 5*68 mV/ MIP
        self.mip_energy = mipEnergy #MeV / MIP
        self.clock_cycle = 25. #ns - needs to match the setting on the chip   
        self.pe_per_mip = nPEPerMIP
        
        # TODO: do these need to be different for TOT/ADC modes?
        self.gain = gain
        self.pedestal = pedestal

	# attenuation length
        self.attenuationLength = 5.; # in m  
        
        self.digiCollName = 'HcalDigis'
        self.digiPassName = ''
        self.simHitCollName = 'HcalSimHits'
        self.simHitPassName = ''
        self.recHitCollName = 'HcalRecHits'
